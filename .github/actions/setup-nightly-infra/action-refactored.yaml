---
name: Tekton Nightly Build Infra (Refactored)
description: |
  Sets up Tekton nightly build infrastructure (refactored for efficiency and maintainability).
inputs:
  kubernetes_version:
    description: 'Kubernetes version to test with'
    required: false
    default: 'v1.33.x'
  image_registry:
    description: 'Image registry'
    required: false
    default: 'ghcr.io'
  image_registry_user:
    description: 'Image registry user'
    required: false
    default: 'tekton-robot'
  ghcr_token:
    description: 'GHCR token'
    required: true
  gcs_service_account_key:
    description: 'GCS service account key'
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Kind cluster
      uses: chainguard-dev/actions/setup-kind@v1.4.12
      with:
        k8s-version: ${{ inputs.kubernetes_version }}

    - name: Set up Tekton
      uses: tektoncd/actions/setup-tektoncd@0986bcdfbaf4f83a8a7b19bc2fa360c44ee55929
      with:
        pipeline_version: v1.4.0
        setup_registry: "true"
        patch_etc_hosts: "true"

    - name: Install tkn CLI
      uses: tektoncd/actions/setup-tektoncd-cli@0986bcdfbaf4f83a8a7b19bc2fa360c44ee55929
      with:
        version: v0.42.0

    - name: Create and configure secrets
      env:
        GCS_SERVICE_ACCOUNT_KEY: ${{ inputs.gcs_service_account_key }}
        GHCR_TOKEN: ${{ inputs.ghcr_token }}
        IMAGE_REGISTRY_USER: ${{ inputs.image_registry_user }}
        IMAGE_REGISTRY: ${{ inputs.image_registry }}
      run: |
        set -euo pipefail
        trap 'rm -f /tmp/gcs-key.json /tmp/credentials' EXIT
        echo "::add-mask::${GHCR_TOKEN}"
        echo "::add-mask::${IMAGE_REGISTRY_USER}"
        # GCS secret
        echo "${GCS_SERVICE_ACCOUNT_KEY}" > /tmp/gcs-key.json
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: release-secret
        type: Opaque
        data:
          release.json: $(base64 -w0 /tmp/gcs-key.json)
        EOF
        # GHCR secret
        echo "${GHCR_TOKEN}" > /tmp/credentials
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: ghcr-creds
        type: Opaque
        data:
          credentials: $(base64 -w0 /tmp/credentials)
        EOF
        # Docker login and registry secret
        if ! docker login -u="${IMAGE_REGISTRY_USER}" -p="${GHCR_TOKEN}" ${IMAGE_REGISTRY}; then
          echo "Docker login failed" >&2
          exit 1
        fi
        export DOCKERCONFIG_FILE_PATH="$HOME/.docker/config.json"
        if [ ! -f "$DOCKERCONFIG_FILE_PATH" ]; then
          echo "Docker config not found at $DOCKERCONFIG_FILE_PATH" >&2
          exit 1
        fi
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: docker-registry
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson: $(base64 -w0 "$DOCKERCONFIG_FILE_PATH")
        EOF
        # PVC template
        cat > workspace-template.yaml << EOF
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        EOF
      shell: bash

    - name: Apply ServiceAccount, RBAC, and related resources
      run: |
        set -euo pipefail
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: release-right-meow
        secrets:
        - name: release-secret
        - name: git-resolver-secret
        - name: ghcr-creds
        - name: docker-registry
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: kube-api-secret
          annotations:
            kubernetes.io/service-account.name: release-right-meow
        type: kubernetes.io/service-account-token
        ---
        kind: Role
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: pipeline-role
        rules:
        - apiGroups: [""]
          resources: ["services", "configmaps", "secrets"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["apps"]
          resources: ["deployments"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["tekton.dev"]
          resources: ["pipelines", "pipelineruns", "tasks", "taskruns"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: [""]
          resources: ["pods", "pods/log"]
          verbs: ["get", "list"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: pipeline-role-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: pipeline-role
        subjects:
        - kind: ServiceAccount
          name: release-right-meow
        EOF
      shell: bash

    - name: Install Tekton Chains with Fulcio enabled
      env:
        GHCR_TOKEN: ${{ inputs.ghcr_token }}
        IMAGE_REGISTRY_USER: ${{ inputs.image_registry_user }}
      run: |
        set -euo pipefail
        kubectl apply -f https://storage.googleapis.com/tekton-releases/chains/previous/v0.25.1/release.yaml -n tekton-chains
        kubectl patch configmap chains-config -n tekton-chains --type merge -p '
        {
          "data": {
            "artifacts.taskrun.format": "in-toto",
            "artifacts.oci.format": "simplesigning",
            "artifacts.oci.storage": "oci",
            "artifacts.oci.signer": "x509",
            "artifacts.taskrun.storage": "oci",
            "artifacts.taskrun.signer": "x509", 
            "artifacts.taskrun.format": "slsa/v1",
            "artifacts.pipelinerun.storage": "oci",
            "artifacts.pipelinerun.signer": "x509", 
            "artifacts.pipelinerun.format": "slsa/v1",
            "signers.x509.fulcio.enabled": "true",
            "signers.x509.fulcio.address": "https://fulcio.sigstore.dev",
            "signers.x509.fulcio.issuer": "https://token.actions.githubusercontent.com",
            "transparency.enabled": "true",
            "transparency.url": "https://search.sigstore.dev"
          }
        }'
        kubectl rollout restart deployment tekton-chains-controller -n tekton-chains
      shell: bash

    - name: Retrieve and refresh GitHub OIDC token in cluster
      shell: bash
      run: |
        set -euo pipefail
        mint_and_update() {
          echo "Minting fresh OIDC token..."
          token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" | jq -r .value)
          echo "::add-mask::$token"
          kubectl create secret generic github-oidc-token \
            -n tekton-chains \
            --from-literal=oidc-token="$token" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Token refreshed at $(date)"
        }
        refresh_loop() {
          while true; do
            sleep 280
            mint_and_update
          done
        }
        mint_and_update
        echo "Ensuring chains-controller mounts the OIDC token secret..."
        kubectl patch deployment tekton-chains-controller -n tekton-chains --type='json' -p='[
          {
            "op": "replace",
            "path": "/spec/template/spec/volumes/1",
            "value": { "name": "oidc-info", "secret": { "secretName": "github-oidc-token" } }
          }
        ]'
        kubectl rollout status deployment tekton-chains-controller -n tekton-chains --timeout=120s
        refresh_loop &
        echo "Background token refresher running..."
