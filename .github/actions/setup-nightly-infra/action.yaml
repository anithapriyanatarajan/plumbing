---
name: Tekton Nightly Build Infra
description: |
  Sets up Tekton nightly build infrastructure.
inputs:
  kubernetes_version:
    description: 'Kubernetes version to test with'
    required: false
    default: 'v1.33.x'
  image_registry_user:
    description: 'Image registry user'
    required: false
    default: 'tekton-robot'
  ghcr_token:
    description: 'GHCR token'
    required: true
  gcs_service_account_key:
    description: 'GCS service account key'
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up Kind cluster
      uses: chainguard-dev/actions/setup-kind@v1.4.12
      with:
        k8s-version: ${{ inputs.kubernetes_version }}

    - name: Set up Tekton
      uses: tektoncd/actions/setup-tektoncd@main
      with:
        pipeline_version: latest
        setup_registry: "true"
        patch_etc_hosts: "true"

    - name: Install tkn CLI
      uses: tektoncd/actions/setup-tektoncd-cli@main
      with:
        version: latest
        
    - name: Configure Tekton Git Resolver
      env:
        GITHUB_TOKEN: ${{ inputs.ghcr-token }}
      run: |
        set -euo pipefail
        kubectl create secret generic git-resolver-secret \
          --from-literal=token="${GITHUB_TOKEN}" \
          -n tekton-pipelines-resolvers || true
        kubectl annotate secret git-resolver-secret \
          tekton.dev/git-0=github.com \
          -n tekton-pipelines-resolvers || true
        kubectl create secret generic git-resolver-secret \
          --from-literal=token="${GITHUB_TOKEN}" \
          -n default || true
        kubectl annotate secret git-resolver-secret \
          tekton.dev/git-0=github.com \
          -n default || true
        kubectl patch configmap git-resolver-config -n tekton-pipelines-resolvers --patch='
        data:
          api-token-secret-name: "git-resolver-secret"
          api-token-secret-key: "token"
        ' || true
        kubectl patch configmap feature-flags -n tekton-pipelines --patch='
        data:
          enable-cel-in-whenexpression: "true"
        ' || true
      shell: bash

    - name: Create secrets, service account and PVC template
      env:
        GCS_SERVICE_ACCOUNT_KEY: ${{ inputs.gcs_service_account_key }}
        GHCR_TOKEN: ${{ inputs.ghcr_token }}
        IMAGE_REGISTRY_USER: ${{ inputs.image_registry_user }}
      run: |
        set -euo pipefail
        trap 'rm -f /tmp/gcs-key.json /tmp/docker-config.json' EXIT
        # Create GCS service account secret for release bucket access
        echo "${GCS_SERVICE_ACCOUNT_KEY}" > /tmp/gcs-key.json
        kubectl create secret generic release-secret \
          --from-file=release.json=/tmp/gcs-key.json
        # Create a Kubernetes secret for GHCR authentication.
        echo "${GHCR_TOKEN}" > /tmp/docker-config.json
        kubectl create secret generic release-images-secret \
          --from-file=docker-config.json=/tmp/docker-config.json
        cat > workspace-template.yaml << EOF
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        EOF
      shell: bash

    - name: Apply ServiceAccount, RBAC, and related resources
      run: |
        set -euo pipefail
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: release-right-meow
        secrets:
        - name: release-secret
        - name: git-resolver-secret
        - name: release-images-secret
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: kube-api-secret
          annotations:
            kubernetes.io/service-account.name: release-right-meow
        type: kubernetes.io/service-account-token
        ---
        kind: Role
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: pipeline-role
        rules:
        - apiGroups: [""]
          resources: ["services", "configmaps", "secrets"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["apps"]
          resources: ["deployments"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["tekton.dev"]
          resources: ["pipelines", "pipelineruns", "tasks", "taskruns"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: [""]
          resources: ["pods", "pods/log"]
          verbs: ["get", "list"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: pipeline-role-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: pipeline-role
        subjects:
        - kind: ServiceAccount
          name: release-right-meow
        EOF
      shell: bash

    - name: Install Tekton Chains with Fulcio enabled
      run: |
        set -euo pipefail
        # Chains component is installed by default in the tekton-chains namespace
        kubectl apply -f https://github.com/tektoncd/chains/releases/latest/download/release.yaml -n tekton-chains
        kubectl patch configmap chains-config -n tekton-chains --type merge -p '
        {
          "data": {
            "artifacts.taskrun.format": "in-toto",
            "artifacts.oci.format": "simplesigning",
            "artifacts.oci.storage": "oci",
            "artifacts.oci.signer": "x509",
            "signers.x509.fulcio.enabled": "true",
            "signers.x509.fulcio.address": "https://fulcio.sigstore.dev",
            "signers.x509.fulcio.issuer": "https://github.com/login/oauth",
            "signers.x509.fulcio.provider": "github",
            "transparency.enabled": "true",
            "transparency.url": "https://rekor.sigstore.dev"
          }
        }'
      shell: bash

    - name: Apply echo image Task and PipelineRun
      run: |
        set -euo pipefail
        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: tekton.dev/v1
        kind: Task
        metadata:
          name: echo-image-build
        spec:
          params:
            - name: IMAGE
              type: string
          steps:
            - name: build
              image: gcr.io/kaniko-project/executor:latest
              env:
                - name: DOCKER_CONFIG
                  value: /tekton/home/.docker/
              script: |
                echo 'FROM alpine:3.19\nCMD echo "Hello from my simple container!"' > Dockerfile
                /kaniko/executor --dockerfile=Dockerfile --context=. --destination=$(params.IMAGE)
          workspaces:
            - name: dockerconfig
        ---
        apiVersion: tekton.dev/v1
        kind: Pipeline
        metadata:
          name: simple-build-push
        spec:
          params:
            - name: IMAGE
              type: string
          workspaces:
            - name: dockerconfig
          tasks:
            - name: build-and-push
              taskRef:
                name: echo-image-build
              params:
                - name: IMAGE
                  value: $(params.IMAGE)
              workspaces:
                - name: dockerconfig
                  workspace: dockerconfig
        ---
        apiVersion: tekton.dev/v1
        kind: PipelineRun
        metadata:
          name: echo-image-build-run
        spec:
          pipelineRef:
            name: simple-build-push
          params:
            - name: IMAGE
              value: ghcr.io/anithapriyanatarajan/echo-image:latest
          workspaces:
            - name: dockerconfig
              secret:
                secretName: release-images-secret
        EOF
      shell: bash