---
name: Tekton Nightly Build Infra
description: |
  Sets up Tekton nightly build infrastructure.
inputs:
  kubernetes_version:
    description: 'Kubernetes version to test with'
    required: false
    default: 'v1.33.x'
  image_registry_user:
    description: 'Image registry user'
    required: false
    default: 'tekton-robot'
  ghcr_token:
    description: 'GHCR token'
    required: true
  gcs_service_account_key:
    description: 'GCS service account key'
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Kind cluster
      uses: chainguard-dev/actions/setup-kind@v1.4.12
      with:
        k8s-version: ${{ inputs.kubernetes_version }}

    - name: Set up Tekton
      uses: tektoncd/actions/setup-tektoncd@main
      with:
        pipeline_version: latest
        setup_registry: "true"
        patch_etc_hosts: "true"

    - name: Install tkn CLI
      uses: tektoncd/actions/setup-tektoncd-cli@main
      with:
        version: latest
    
    - name: Configure Tekton Git Resolver
      env:
        GITHUB_TOKEN: ${{ inputs.ghcr_token }}
      run: |
        set -euo pipefail
        kubectl create secret generic git-resolver-secret \
          --from-literal=token="${GITHUB_TOKEN}" \
          -n tekton-pipelines-resolvers || true
        kubectl annotate secret git-resolver-secret \
          tekton.dev/git-0=github.com \
          -n tekton-pipelines-resolvers || true
        kubectl create secret generic git-resolver-secret \
          --from-literal=token="${GITHUB_TOKEN}" \
          -n default || true
        kubectl annotate secret git-resolver-secret \
          tekton.dev/git-0=github.com \
          -n default || true
        kubectl patch configmap git-resolver-config -n tekton-pipelines-resolvers --patch='
        data:
          api-token-secret-name: "git-resolver-secret"
          api-token-secret-key: "token"
        ' || true
        kubectl patch configmap feature-flags -n tekton-pipelines --patch='
        data:
          enable-cel-in-whenexpression: "true"
        ' || true
      shell: bash

    # Step 5: Create required secrets and PVC template
    - name: Create secrets, service account and PVC template
      env:
        GCS_SERVICE_ACCOUNT_KEY: ${{ inputs.gcs_service_account_key }}
        GHCR_TOKEN: ${{ inputs.ghcr_token }}
        IMAGE_REGISTRY_USER: ${{ inputs.image_registry_user }}
      run: |
        set -euo pipefail
        trap 'rm -f /tmp/gcs-key.json /tmp/credentials' EXIT
        # Create GCS service account secret for release bucket access
        echo "${GCS_SERVICE_ACCOUNT_KEY}" > /tmp/gcs-key.json
        kubectl create secret generic release-secret \
          --from-file=release.json=/tmp/gcs-key.json
        # Create Kubernetes secret for GHCR authentication
        echo "${GHCR_TOKEN}" > /tmp/credentials
        kubectl create secret generic ghcr-creds \
          --from-file=credentials=/tmp/credentials
        # Create PVC template for persistent storage
        cat > workspace-template.yaml << EOF
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        EOF
      shell: bash

    - name: Apply ServiceAccount, RBAC, and related resources
      run: |
        set -euo pipefail
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: release-right-meow
        secrets:
        - name: release-secret
        - name: git-resolver-secret
        - name: release-images-secret
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: kube-api-secret
          annotations:
            kubernetes.io/service-account.name: release-right-meow
        type: kubernetes.io/service-account-token
        ---
        kind: Role
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: pipeline-role
        rules:
        - apiGroups: [""]
          resources: ["services", "configmaps", "secrets"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["apps"]
          resources: ["deployments"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: ["tekton.dev"]
          resources: ["pipelines", "pipelineruns", "tasks", "taskruns"]
          verbs: ["get", "create", "update", "patch", "list"]
        - apiGroups: [""]
          resources: ["pods", "pods/log"]
          verbs: ["get", "list"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: pipeline-role-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: pipeline-role
        subjects:
        - kind: ServiceAccount
          name: release-right-meow
        EOF
      shell: bash

    - name: Install Tekton Chains with Fulcio enabled
      run: |
        set -euo pipefail
        # Chains component is installed by default in the tekton-chains namespace
        kubectl apply -f https://github.com/tektoncd/chains/releases/latest/download/release.yaml -n tekton-chains
        
        kubectl patch configmap chains-config -n tekton-chains --type merge -p '
        {
          "data": {
            "artifacts.taskrun.format": "in-toto",
            "artifacts.oci.format": "simplesigning",
            "artifacts.oci.storage": "oci",
            "artifacts.oci.signer": "x509",
            "signers.x509.fulcio.enabled": "true",
            "signers.x509.fulcio.address": "https://fulcio.sigstore.dev",
            "signers.x509.fulcio.issuer": "https://token.actions.githubusercontent.com",
            "transparency.enabled": "true",
            "transparency.url": "https://rekor.sigstore.dev"
          }
        }'
        kubectl rollout restart deployment tekton-chains-controller -n tekton-chains
      shell: bash

    - name: Wait for Tekton Chains pod to be ready
      run: |
        set -euo pipefail
        echo "Waiting for Tekton Chains controller to be ready..."
        kubectl wait --for=condition=ready pod -l app=tekton-chains-controller -n tekton-chains --timeout=300s
        echo "Tekton Chains is ready!"
      shell: bash

    - name: Configure Tekton Chains logging to debug
      run: |
        set -euo pipefail
        echo "Setting Tekton Chains logging to debug level..."
        kubectl patch configmap config-logging -n tekton-chains --type merge -p '
        {
          "data": {
            "loglevel.controller": "debug",
            "loglevel.webhook": "debug"
          }
        }'
        echo "Restarting Tekton Chains controller to apply logging changes..."
        kubectl rollout restart deployment/tekton-chains-controller -n tekton-chains
        kubectl wait --for=condition=ready pod -l app=tekton-chains-controller -n tekton-chains --timeout=300s
        echo "Tekton Chains controller restarted with debug logging!"
      shell: bash
    
    - name: Mint & continuously refresh GitHub OIDC token in cluster
      shell: bash
      run: |
        set -euo pipefail

        mint_and_update() {
          echo "üîë Minting fresh OIDC token..."
          token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" | jq -r .value)

          # Decode JWT payload (handle URL-safe base64)
          PAYLOAD=$(echo "$token" | cut -d. -f2 | tr '_-' '/+' | base64 -d 2>/dev/null | jq . || true)

          EXP=$(echo "$PAYLOAD" | jq -r .exp)
          AUD=$(echo "$PAYLOAD" | jq -r .aud)
          EXP_HUMAN=$(date -d @"$EXP" 2>/dev/null || echo "unknown")

          echo "üîç Token Audience : $AUD"
          echo "‚è∞ Token Expiration: $EXP_HUMAN"

          echo "::add-mask::$token"

          # Create or patch secret in place
          kubectl create secret generic github-oidc-token \
            -n tekton-chains \
            --from-literal=oidc-token="$token" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "‚úÖ Token refreshed at $(date)"
        }

        refresh_loop() {
          while true; do
            sleep 280   # 5 minutes
            mint_and_update
          done
        }

        # 1. Initial mint
        mint_and_update

        # 2. Patch chains-controller once to mount the secret
        echo "üì¶ Ensuring chains-controller mounts the OIDC token secret..."
        kubectl patch deployment tekton-chains-controller -n tekton-chains --type='json' -p='[
          {
            "op": "replace",
            "path": "/spec/template/spec/volumes/1",
            "value": { "name": "oidc-info", "secret": { "secretName": "github-oidc-token" } }
          }
        ]'

        kubectl rollout status deployment tekton-chains-controller -n tekton-chains --timeout=120s

        # 3. Start background refresher
        refresh_loop &
        echo "‚ôªÔ∏è Background token refresher running..."

        kubectl get secret github-oidc-token -n tekton-chains -o jsonpath='{.data.oidc-token}'